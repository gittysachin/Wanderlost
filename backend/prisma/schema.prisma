generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Permission {
  ADMIN
  USER
  ITEMCREATE
  ITEMUPDATE
  ITEMDELETE
  PERMISSIONUPDATE
}

model User {
  id               String     @default(cuid()) @id
  email            String     @unique
  name             String?
  password         String
  resetToken       String?
  resetTokenExpiry Float?
  permissions      Permission
  cart             CartItem[]
  post             Post[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Post {
  id        Int      @default(autoincrement()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)
  title     String
  content   String?
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?  @map("author")
}

model Item {
  id          String   @default(cuid()) @id
  title       String
  description String
  image       String
  largeImage  String
  price       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @map("user")
}

model CartItem {
  id       String @default(cuid()) @id
  quantity Int    @default(1)
  item     Item   @relation(fields: [itemId], references: [id])
  itemId   String @map("item")
  user     User   @relation(fields: [userId], references: [id])
  userId   String @map("user")
}

model Order {
  id        String      @default(cuid()) @id
  items     OrderItem[]
  total     Int
  charge    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
  userId    String      @map("user")
}

model OrderItem {
  id          String @default(cuid()) @id
  title       String
  description String
  image       String
  largeImage  String
  price       Int
  quantity    Int    @default(1)
  user        User   @relation(fields: [userId], references: [id])
  userId      String @map("user")
  order       Order  @relation(fields: [orderId], references: [id])
  orderId     String
}